From f3e01f193a113b11151ac163f461ffcd9540fec2 Mon Sep 17 00:00:00 2001
From: Neon Chen <neon_chen@tw.shuttle.com>
Date: Thu, 29 Sep 2016 16:54:16 +0800
Subject: [PATCH 299/443] Fix Face Add bug: default TCIT group and PersonId
 error.

There is only one default TCIT group.
If PersonId doesn't add in TCIT group, then delete from TCIT.
---
 api/face.py | 29 +++++++++++++++++++++--------
 1 file changed, 21 insertions(+), 8 deletions(-)

diff --git a/api/face.py b/api/face.py
index c78aa74..54a671c 100644
--- a/api/face.py
+++ b/api/face.py
@@ -17,13 +17,19 @@ try:
     res_groupList = TCIT_API("/face/query/group_list")
     if res_groupList.get('state', '') == TCIT_res_state["STATE_SUCCESSFUL"]:
         if res_groupList.get('groups', ''):
-            TCIT_Group = res_groupList['groups'][0]
-            print('default TCIT group exist.')
+            TCIT_Group = res_groupList['groups'][len(res_groupList['groups'])-1]
+            #print('default TCIT Group: ', TCIT_Group)
+            if not len(res_groupList['groups']) == 1:
+                print("ERROR: there're more than one group in TCIT: ", len(res_groupList['groups']))
+            else:
+                Config.objects.update_or_create(Name = "TCITGroup", Value = TCIT_Group)
+                print('default TCIT group exist.')
         else:
             res_groupCreate = TCIT_API("/face/group/create/")
             if res_groupCreate.get('state', '') == TCIT_res_state["STATE_SUCCESSFUL"]:
                 if res_groupCreate.get('group_id', ''):
                     TCIT_Group = res_groupCreate['group_id']
+                    Config.objects.update_or_create(Name = "TCITGroup", Value = TCIT_Group)
                     print('create default TCIT group')
             else:
                 print('TCIT_group create error.')
@@ -86,14 +92,21 @@ def add(request):
                 if res_personid.get('state', '') == TCIT_res_state["STATE_SUCCESSFUL"]:
                     #print('person_id', res_personid['person_id'])
                     person_id = res_personid.get('person_id')
+                    # Add Person in TCIT Group
+                    TCITGroup = Config.objects.get(Name = 'TCITGroup').Value
+                    # print(TCITGroup)
+                    res_groupAdd = TCIT_API('/face/group/update/add', data = {'person_id': person_id, 'group_id': TCITGroup})
+                    if not res_groupAdd.get('state', '') == TCIT_res_state["STATE_SUCCESSFUL"]:
+                        res_personid_delete = TCIT_API('/face/person/delete/', data = {'person_id': person_id})
+                        if res_personid_delete.get('state', '') == TCIT_res_state["STATE_SUCCESSFUL"]:
+                            logContent = '{message_head}TCIT[Add Person to Group] Error cause by {TCIT_res}'.format(message_head = message_head, TCIT_res = TCIT_res_state[res_groupAdd.get('state', '')])
+                            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : logContent})))
+                        else:
+                            logContent = '{message_head}TCIT[Delete PersonId] Error cause by {TCIT_res}'.format(message_head = message_head, TCIT_res = TCIT_res_state[res_personid_delete.get('state', '')])
+                            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : logContent})))
+                    # Add PersonId to database, if Add Person in TCIT Group success
                     fruser.PersonId = person_id
-                    fruser.UpdateDate = datetime.now()
                     fruser.save()
-                    # Add Person to Group in TCIT
-                    res_groupAdd = TCIT_API('/face/group/update/add', data = {'person_id': person_id, 'group_id': TCIT_Group})
-                    if not res_groupAdd.get('state', '') == TCIT_res_state["STATE_SUCCESSFUL"]:
-                        logContent = '{message_head}TCIT[Add Person to Group] Error cause by {TCIT_res}'.format(message_head = message_head, TCIT_res = TCIT_res_state[res_groupAdd.get('state', '')])
-                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : logContent})))
                 else:
                     logContent = '{message_head}TCIT[Create Person] Error cause by {TCIT_res}'.format(message_head = message_head, TCIT_res = TCIT_res_state[res_personid.get('state', '')])
                     return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : logContent})))
-- 
1.9.1

