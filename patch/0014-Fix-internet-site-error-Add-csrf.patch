From 86426d4c40732fd5b57b8f440f49efbc9e139201 Mon Sep 17 00:00:00 2001
From: wellens <wellens_kuo@tw.shuttle.com>
Date: Wed, 27 Apr 2016 16:32:30 +0800
Subject: [PATCH 014/443] Fix internet site error & Add csrf

Fix url error.
Add csrf.
Arrange API code.
---
 api/connection.py  |  70 ++++++++---------
 api/face.py        |  16 ++--
 api/group.py       |   6 +-
 api/models.py      |  14 ++--
 api/recognition.py | 222 ++++++++++++++++++++++++-----------------------------
 api/user.py        |  21 +++--
 br06/settings.py   |   3 +-
 br06/urls.py       |  12 +--
 8 files changed, 178 insertions(+), 186 deletions(-)

diff --git a/api/connection.py b/api/connection.py
index 75da6c8..8d269c3 100644
--- a/api/connection.py
+++ b/api/connection.py
@@ -3,12 +3,14 @@
 import json
 from collections import ChainMap
 from django.http import JsonResponse
+from django.views.decorators.csrf import csrf_exempt
 
 result_success = {'Result' : 'Success'}
 result_fail = {'Result' : 'Fail'}
 fail_code999 = {'Code' : '9999'}
 message_method_error = {'Message' : 'method error'}
 
+@csrf_exempt
 def check(request):
     if request.method == 'POST':
         try:
@@ -22,36 +24,35 @@ def check(request):
             except:
                 Devices.objects.create(Name = 'Default' + client_ip, State = 'Proposed', IP = '10.0.3.119')
                 return JsonResponse({'Result' : 0})
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def get(request):
     if request.method == 'POST':
         try:
             client_ip = request.META['REMOTE_ADDR']
-            try:
-                from api.models import Devices
-                devices = Devices.objects.get(IP = client_ip)
+            from api.models import Devices
+            devices = Devices.objects.get(IP = client_ip)
 
-                return JsonResponse(dict(ChainMap(result_success, { \
-                    'Welcome' : devices.Welcome, \
-                    'AccessDenied' : devices.AccessDenied, \
-                    'ScreenSaver' : devices.ScreenSaver, \
-                    'NTP' : devices.NTP, \
-                    'Timezone' : devices.Timezone, \
-                    'Audio' : devices.Audio, \
-                    'BioScore' : devices.BioScore, \
-                    'Language' : devices.Language \
-                })))
-            except:
-                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no device of imformation in database'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+            return JsonResponse(dict(ChainMap(result_success, { \
+                'Welcome' : devices.Welcome, \
+                'AccessDenied' : devices.AccessDenied, \
+                'ScreenSaver' : devices.ScreenSaver, \
+                'NTP' : devices.NTP, \
+                'Timezone' : devices.Timezone, \
+                'Audio' : devices.Audio, \
+                'BioScore' : devices.BioScore, \
+                'Language' : devices.Language \
+            })))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def set(request):
     if request.method == 'POST':
         try:
@@ -59,25 +60,22 @@ def set(request):
             req = json.loads(request.body.decode('utf-8'))
             req_key = {'Welcome', 'AccessDenied', 'ScreenSaver', 'NTP', 'Timezone', 'Audio', 'BioScore', 'Language'}
             if all(k in req for k in req_key) and all(req.values()):
-                try:
-                    from api.models import Devices
-                    Devices.objects.filter(IP = client_ip).update( \
-                        Welcome = req['Welcome'], \
-                        AccessDenied = req['AccessDenied'], \
-                        ScreenSaver = req['ScreenSaver'], \
-                        NTP = req['NTP'], \
-                        Timezone = req['Timezone'], \
-                        Audio = req['Audio'], \
-                        BioScore = req['BioScore'], \
-                        Language = req['Language'] \
-                    )
+                from api.models import Devices
+                Devices.objects.filter(IP = client_ip).update( \
+                    Welcome = req['Welcome'], \
+                    AccessDenied = req['AccessDenied'], \
+                    ScreenSaver = req['ScreenSaver'], \
+                    NTP = req['NTP'], \
+                    Timezone = req['Timezone'], \
+                    Audio = req['Audio'], \
+                    BioScore = req['BioScore'], \
+                    Language = req['Language'] \
+                )
 
-                    return JsonResponse(result_success)
-                except:
-                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Database update error'})))
+                return JsonResponse(result_success)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
diff --git a/api/face.py b/api/face.py
index 31d8c58..89949ba 100644
--- a/api/face.py
+++ b/api/face.py
@@ -3,6 +3,7 @@
 import json, requests
 from collections import ChainMap
 from django.http import JsonResponse
+from django.views.decorators.csrf import csrf_exempt
 from .utility import TCIT_API
 
 result_success = {'Result' : 'Success'}
@@ -10,6 +11,7 @@ result_fail = {'Result' : 'Fail'}
 fail_code999 = {'Code' : '9999'}
 message_method_error = {'Message' : 'method error'}
 
+@csrf_exempt
 def add(request):
     if request.method == 'POST':
         try:
@@ -22,11 +24,12 @@ def add(request):
                 return JsonResponse(result_success)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def delete(request):
     if request.method == 'POST':
         try:
@@ -39,11 +42,12 @@ def delete(request):
                 return JsonResponse(result_success)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def list(request):
     if request.method == 'POST':
         try:
@@ -55,7 +59,7 @@ def list(request):
                 """
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
diff --git a/api/group.py b/api/group.py
index a6ed4c6..ac5f91e 100644
--- a/api/group.py
+++ b/api/group.py
@@ -3,10 +3,12 @@
 import json
 from collections import ChainMap
 from django.http import JsonResponse
+from django.views.decorators.csrf import csrf_exempt
 
 result_fail = {'Result':'Fail'}
 fail_code999 = {'Code':'9999'}
 
+@csrf_exempt
 def list(request):
     if request.method == 'POST':
         try:
@@ -20,7 +22,7 @@ def list(request):
                     return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no group of imformation in database'})))
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'method error'})))
diff --git a/api/models.py b/api/models.py
index 42daccd..e9b6059 100644
--- a/api/models.py
+++ b/api/models.py
@@ -175,11 +175,11 @@ class Users(models.Model):
 
     def __str__(self):
         return '%s (%s)' % (self.Account, self.OId)
-    
+
     def as_json(self):
         return dict(
             Index = 0,
-            OId=str(self.OId),
+            OId=self.OId,
             Account=self.Account,
             Password=self.Password,
             Name=self.Name,
@@ -258,14 +258,14 @@ class Frusers(models.Model):
 
     class Meta:
         db_table = 'frusers'
-    
+
     def __str__(self):
         return '%s %s (%s)' % (self.FRUserId, self.Name, self.OId)
-    
+
     def as_json(self):
         return dict(
             Index = 0,
-            OId = str(self.OId),
+            OId = self.OId,
             FRUserID = self.FRUserId,
             Name = self.Name,
             Gender = self.Gender,
@@ -367,11 +367,11 @@ class Systemlogs(models.Model):
 
     def __str__(self):
         return '%s %s' % (self.Category, self.LogDateTime)
-   
+
     def as_json(self):
         return dict(
             Index = 0,
-            OId=str(self.OId),
+            OId=self.OId,
             Category=self.Category,
             LogContent=self.LogContent,
             LogDateTime=self.LogDateTime.strftime("%Y-%m-%d %H:%M:%S"),
diff --git a/api/recognition.py b/api/recognition.py
index 184bc9d..d5bc7d0 100644
--- a/api/recognition.py
+++ b/api/recognition.py
@@ -3,6 +3,7 @@
 import json, requests
 from collections import ChainMap
 from django.http import JsonResponse
+from django.views.decorators.csrf import csrf_exempt
 from .utility import TCIT_API
 
 result_success = {'Result' : 'Success'}
@@ -11,6 +12,7 @@ result_fail = {'Result' : 'Fail'}
 fail_code999 = {'Code' : '9999'}
 message_method_error = {'Message' : 'method error'}
 
+@csrf_exempt
 def face_verify(request):
     if request.method == 'POST':
         try:
@@ -23,13 +25,12 @@ def face_verify(request):
                 return JsonResponse(result_pass)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
-
-
+@csrf_exempt
 def face_identify(request):
     if request.method == 'POST':
         from .models import Devices, Frusers, Fruserlogs
@@ -39,79 +40,67 @@ def face_identify(request):
             ip_device = Devices.objects.get(IP = client_ip)
 
             if ip_device.State != 'Proposed':
-                try:
-                    res_upload = json.loads( \
-                        requests.post( \
-                            TCIT_API('storage/upload'), \
-                            files = {'image' : ( \
-                                request.FILES['image'].name, \
-                                request.FILES['image'].file, \
-                                request.FILES['image'].content_type \
-                            )} \
-                        ).text \
+                res_upload = json.loads(
+                    requests.post(
+                        TCIT_API('storage/upload'),
+                        files = {'image' : (
+                            request.FILES['image'].name,
+                            request.FILES['image'].file,
+                            request.FILES['image'].content_type
+                        )}
+                    ).text
+                )
+
+                if res_upload['state'] == 1000:
+                    res_face_detect = json.loads(
+                        requests.post(
+                            TCIT_API('face/detection/detect'),
+                            data = {'img_id' : res_upload['img_id']}
+                        ).text
                     )
-
-                    if res_upload['state'] == 1000:
-                        res_face_detect = json.loads( \
-                            requests.post( \
-                                TCIT_API('face/detection/detect'), \
-                                data = {'img_id' : res_upload['img_id']} \
-                            ).text \
+                    face_id = res_face_detect['faces'][0]['face_id']
+
+                    for group in json.loads(requests.post(TCIT_API('face/query/group_list')).text)['groups']:
+                        person_id = None
+                        similarity = 50
+                        res_group_identify = json.loads(
+                            requests.post(
+                                TCIT_API('face/group/identify'),
+                                data = {'group_id' : group, 'face_id' : face_id}
+                            ).text
                         )
-                        face_id = res_face_detect['faces'][0]['face_id']
 
-                        for group in json.loads(requests.post(TCIT_API('face/query/group_list')).text)['groups']:
-                            person_id = None
-                            similarity = 50
-                            res_group_identify = json.loads( \
-                                requests.post( \
-                                    TCIT_API('face/group/identify'), \
-                                    data = {'group_id' : group, 'face_id' : face_id} \
-                                ).text \
-                            )
-
-                            if res_group_identify['state'] == 1000:
-                                for person in res_group_identify['persons']:
-                                    if person['similarity'] >= similarity:
-                                        similarity = person['similarity']
-                                        person_id = person['person_id']
-                            else:
-                                Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : Request TCIT error')
-                                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request TCIT error'})))
+                        if res_group_identify['state'] == 1000:
+                            for person in res_group_identify['persons']:
+                                if person['similarity'] >= similarity:
+                                    similarity = person['similarity']
+                                    person_id = person['person_id']
+                        else:
+                            raise Exception('Request TCIT error')
 
-                        if person_id != None:
-                            try:
-                                fruser = Frusers.objects.get(PersonId = person_id)
+                    if person_id != None:
+                        fruser = Frusers.objects.get(PersonId = person_id)
 
-                                for member in fruser.frusergroupmember_set.filter(FRUserOId = fruser.OId):
-                                    for device in member.GroupOId.frusergroupdevices_set.filter(GroupOId = member.GroupOId):
-                                        if device.DeviceOId == ip_device:
-                                            Fruserlogs.objects.create(FRUserOId = fruser, DeviceOId = ip_device, LogContent = 'Face identify pass')
-                                            return JsonResponse(dict(ChainMap(result_pass, {'FRUserId' : fruser.FRUserId})))
+                        for member in fruser.frusergroupmember_set.filter(FRUserOId = fruser.OId):
+                            for device in member.GroupOId.frusergroupdevices_set.filter(GroupOId = member.GroupOId):
+                                if device.DeviceOId == ip_device:
+                                    Fruserlogs.objects.create(FRUserOId = fruser, DeviceOId = ip_device, LogContent = 'Face identify pass')
+                                    return JsonResponse(dict(ChainMap(result_pass, {'FRUserId' : fruser.FRUserId})))
 
-                                Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : There is no permission device')
-                                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no permission device'})))
-                            except:
-                                Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : There is no fruser of imformation in database')
-                                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no fruser of imformation in database'})))
-                        else:
-                            Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : Person_id not correct')
-                            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Person_id not correct'})))
+                        raise Exception('There is no permission device')
                     else:
-                        Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : Request TCIT error')
-                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request TCIT error'})))
-                except:
-                    Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : Upload error')
-                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Upload error'})))
+                        raise Exception('Person_id not correct')
+                else:
+                    raise Exception('Request TCIT error')
             else:
-                Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : Need accept')
-                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
-
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+                raise Exception('Need accept')
+        except Exception as e:
+            Fruserlogs.objects.create(DeviceOId = ip_device, LogContent = 'Face identify fail : %s' % str(e))
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def face_check(request):
     if request.method == 'POST':
         try:
@@ -119,37 +108,35 @@ def face_check(request):
             from .models import Devices
             ip_devices = Devices.objects.get(IP = client_ip)
             if ip_devices.State != 'Proposed':
-                try:
-                    res_upload = json.loads( \
-                        requests.post( \
-                            TCIT_API('storage/upload'), \
-                            files = {'image': ( \
-                                request.FILES['image'].name, \
-                                request.FILES['image'].file, \
-                                request.FILES['image'].content_type \
-                            )} \
-                        ).text \
+                res_upload = json.loads(
+                    requests.post(
+                        TCIT_API('storage/upload'),
+                        files = {'image': (
+                            request.FILES['image'].name,
+                            request.FILES['image'].file,
+                            request.FILES['image'].content_type
+                        )}
+                    ).text
+                )
+                if res_upload['state'] == 1000:
+                    res_face_detect = json.loads(
+                            requests.post(
+                                TCIT_API('face/detection/detect'),
+                                data = {'img_id' : res_upload['img_id']}
+                            ).text
                     )
-                    if res_upload['state'] == 1000:
-                        res_face_detect = json.loads( \
-                                requests.post( \
-                                    TCIT_API('face/detection/detect'), \
-                                    data = {'img_id' : res_upload['img_id']} \
-                                ).text \
-                        )
-                        face_id = res_face_detect['faces'][0]['face_id']
-                        return JsonResponse(result_success)
-                    else:
-                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request TCIT error'})))
-                except:
-                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Upload error'})))
+                    face_id = res_face_detect['faces'][0]['face_id']
+                    return JsonResponse(result_success)
+                else:
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request TCIT error'})))
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def rfid_verify(request):
     if request.method == 'POST':
         try:
@@ -157,28 +144,26 @@ def rfid_verify(request):
             req = json.loads(request.body.decode('utf-8'))
             req_key = {'RFIDCard'}
             if all(k in req for k in req_key) and all(req.values()):
-                try:
-                    from .models import Devices
-                    ip_device = Devices.objects.get(IP = client_ip)
-                    if ip_device.State != 'Proposed':
-                        from .models import Frusers
-                        fruser = Frusers.objects.get(RFIDCard = req['RFIDCard'])
-                        for member in fruser.frusergroupmember_set.filter(FRUserOId = fruser.OId):
-                            for device in member.GroupOId.frusergroupdevices_set.filter(GroupOId = member.GroupOId):
-                                if device.DeviceOId == ip_device:
-                                    return JsonResponse(dict(ChainMap(result_pass, {'FRUserId':fruser.FRUserId})))
-                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no permission device'})))
-                    else:
-                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
-                except:
-                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no device of imformation in database'})))
+                from .models import Devices
+                ip_device = Devices.objects.get(IP = client_ip)
+                if ip_device.State != 'Proposed':
+                    from .models import Frusers
+                    fruser = Frusers.objects.get(RFIDCard = req['RFIDCard'])
+                    for member in fruser.frusergroupmember_set.filter(FRUserOId = fruser.OId):
+                        for device in member.GroupOId.frusergroupdevices_set.filter(GroupOId = member.GroupOId):
+                            if device.DeviceOId == ip_device:
+                                return JsonResponse(dict(ChainMap(result_pass, {'FRUserId':fruser.FRUserId})))
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no permission device'})))
+                else:
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def rfid_check(request):
     if request.method == 'POST':
         try:
@@ -186,19 +171,16 @@ def rfid_check(request):
             req = json.loads(request.body.decode('utf-8'))
             req_key = {'RFIDCard'}
             if all(k in req for k in req_key) and all(req.values()):
-                try:
-                    from .models import Devices
-                    if Devices.objects.get(IP = client_ip).State != 'Proposed':
-                        from .models import Frusers
-                        Frusers.objects.get(RFIDCard = req['RFIDCard'])
-                        return JsonResponse(result_success)
-                    else:
-                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
-                except:
-                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'There is no device of imformation in database'})))
+                from .models import Devices
+                if Devices.objects.get(IP = client_ip).State != 'Proposed':
+                    from .models import Frusers
+                    Frusers.objects.get(RFIDCard = req['RFIDCard'])
+                    return JsonResponse(result_success)
+                else:
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
diff --git a/api/user.py b/api/user.py
index d9bf931..eb1007b 100644
--- a/api/user.py
+++ b/api/user.py
@@ -3,6 +3,7 @@
 import json, requests
 from collections import ChainMap
 from django.http import JsonResponse
+from django.views.decorators.csrf import csrf_exempt
 from .utility import TCIT_API
 
 result_success = {'Result' : 'Success'}
@@ -10,6 +11,7 @@ result_fail = {'Result' : 'Fail'}
 fail_code999 = {'Code' : '9999'}
 message_method_error = {'Message' : 'method error'}
 
+@csrf_exempt
 def add(request):
     if request.method == 'POST':
         try:
@@ -22,11 +24,12 @@ def add(request):
                 return JsonResponse(result_success)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def update(request):
     if request.method == 'POST':
         try:
@@ -39,11 +42,12 @@ def update(request):
                 return JsonResponse(result_success)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def delete(request):
     if request.method == 'POST':
         try:
@@ -56,18 +60,19 @@ def delete(request):
                 return JsonResponse(result_success)
             else:
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
 
+@csrf_exempt
 def list(request):
     if request.method == 'POST':
         try:
             """
             enter code
             """
-        except:
-            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Bad request'})))
+        except Exception as e:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
         return JsonResponse(dict(ChainMap(result_fail, fail_code999, message_method_error)))
diff --git a/br06/settings.py b/br06/settings.py
index 3e28eb7..60a8a35 100644
--- a/br06/settings.py
+++ b/br06/settings.py
@@ -47,7 +47,7 @@ MIDDLEWARE_CLASSES = [
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.common.CommonMiddleware',
-    #'django.middleware.csrf.CsrfViewMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
@@ -121,6 +121,7 @@ USE_L10N = True
 
 USE_TZ = True
 
+#NOCAPTCHA = True
 NOCAPTCHA = True
 
 NORECAPTCHA_SITE_KEY = os.environ.get('NORECAPTCHA_SITE_KEY', "")
diff --git a/br06/urls.py b/br06/urls.py
index a58f34e..e67b086 100644
--- a/br06/urls.py
+++ b/br06/urls.py
@@ -24,12 +24,12 @@ import fruserlogs.views
 urlpatterns = [
     url(r'^admin/', admin.site.urls),
     url(r'^$', login),
-    url(r'^logout/$', logout),
-    url(r'^user_list/$', user_list_view),
-    url(r'^setting/$', user_setting),
-    url(r'^fruser_list/$', frusers.views.fruser_list_view),
-    url(r'^log_list/$', systemlogs.views.log_list_view),
-    url(r'^FRlog_list/$', fruserlogs.views.log_list_view),
+    url(r'^logout/?$', logout),
+    url(r'^user_list/?$', user_list_view),
+    url(r'^setting/?$', user_setting),
+    url(r'^fruser_list/?$', frusers.views.fruser_list_view),
+    url(r'^log_list/?$', systemlogs.views.log_list_view),
+    url(r'^FRlog_list/?$', fruserlogs.views.log_list_view),
 ]
 
 urlpatterns += [
-- 
1.9.1

