From a119119cc5f2821d4e7a0d3378cd44d4b516393d Mon Sep 17 00:00:00 2001
From: benson <bensonhuang@tw.shuttle.com>
Date: Mon, 23 May 2016 11:00:15 +0800
Subject: [PATCH 063/443] Add login app from user app about login functions.

login, logout, forget/reset password, checkRecaptcha
---
 br06/urls.py                              |  18 +--
 login/__init__.py                         |   0
 login/__pycache__/__init__.cpython-34.pyc | Bin 0 -> 132 bytes
 login/__pycache__/apps.cpython-34.pyc     | Bin 0 -> 3349 bytes
 login/__pycache__/views.cpython-34.pyc    | Bin 0 -> 7156 bytes
 login/admin.py                            |   3 +
 {user => login}/apps.py                   |   5 +-
 login/migrations/__init__.py              |   0
 login/models.py                           |   3 +
 login/tests.py                            |   3 +
 {user => login}/views.py                  | 115 ++----------------
 user/apps.py                              |  96 ---------------
 user/views.py                             | 196 +-----------------------------
 13 files changed, 36 insertions(+), 403 deletions(-)
 create mode 100644 login/__init__.py
 create mode 100644 login/__pycache__/__init__.cpython-34.pyc
 create mode 100644 login/__pycache__/apps.cpython-34.pyc
 create mode 100644 login/__pycache__/views.cpython-34.pyc
 create mode 100644 login/admin.py
 copy {user => login}/apps.py (97%)
 create mode 100644 login/migrations/__init__.py
 create mode 100644 login/models.py
 create mode 100644 login/tests.py
 copy {user => login}/views.py (69%)

diff --git a/br06/urls.py b/br06/urls.py
index ecbb347..4ab79f2 100644
--- a/br06/urls.py
+++ b/br06/urls.py
@@ -16,7 +16,7 @@ Including another URLconf
 from django.conf.urls import url
 from django.contrib import admin
 from api import user, group, face, recognition, connection
-from user.views import user_setting, login, logout, change_passwd, password_reset_confirm, ResetPasswordRequestView, user_list_view, user_add_view, user_update_view, add_user, update_user, delete_user
+from user.views import user_setting, user_list_view, user_add_view, user_update_view, add_user, update_user, delete_user
 from frusers.views import fruser_list_view
 from systemlogs.views import systemlog_list_view, systemlog_export
 from fruserlogs.views import fruserlog_list_view, fruserlog_export
@@ -26,11 +26,11 @@ from devices.views import device_list_view, device_add_view, device_edit_view, d
 from usergroups.views import user_group_list_view, user_group_add_view, user_group_edit_view, user_group_members_view, user_group_devices_view, add_user_group, change_user_group_name, delete_user_group, add_user_group_member, delete_user_group_member, add_user_group_device, delete_user_group_device
 from role.views import role_list_view, role_add_view, role_rename_view, role_permission_view, rename_role, add_role, delete_role
 from frusergroups.views import frusergroups_list, delete_frusergroup, frusergroup_add_view, add_frusergroup, frusergroup_edit_view, change_frusergroup_name, frusergroup_member_view, add_frusergroup_member, delete_frusergroup_member, frusergroup_devices_view, add_frusergroup_device, delete_frusergroup_device
+from login.views import login, logout, password_reset_confirm, ResetPasswordRequestView
+
 
 urlpatterns = [
     url(r'^admin/', admin.site.urls),
-    url(r'^$', login),
-    url(r'^logout/?$', logout),
     url(r'^setting/?$', user_setting),
     url(r'^fruser_list/?$', fruser_list_view),
     url(r'^systemlog_list/?$', systemlog_list_view),
@@ -42,6 +42,13 @@ urlpatterns = [
 ]
 
 urlpatterns += [
+    url(r'^$', login),
+    url(r'^logout/?$', logout),
+    url(r'^reset_password/(?P<uidb64>[0-9A-Za-z]+)/(?P<times>.+)/(?P<token>.+)/$', password_reset_confirm, name='password_reset_confirm'),
+    url(r'^account/forget_password', ResetPasswordRequestView),
+]
+
+urlpatterns += [
     url(r'^user_list/?$', user_list_view),
     url(r'^user_add/?$', user_add_view),
     url(r'^user_update/?$', user_update_view),
@@ -134,8 +141,3 @@ urlpatterns += [
     url(r'^api/connection/get/?$', connection.get),
     url(r'^api/connection/set/?$', connection.set),
 ]
-
-urlpatterns += [
-    url(r'^reset_password/(?P<uidb64>[0-9A-Za-z]+)/(?P<times>.+)/(?P<token>.+)/$', password_reset_confirm),
-    url(r'^account/forget_password', ResetPasswordRequestView),
-]
diff --git a/login/__init__.py b/login/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/login/__pycache__/__init__.cpython-34.pyc b/login/__pycache__/__init__.cpython-34.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3e45c6f806e25c34c1d955c764d9986c970d3624
GIT binary patch
literal 132
zcmaFI!^_oq%`Th)2p)q77+?f49Dul(1xTbYFa&Ed`mJOr0tq9CUxxY_`MIh3NvV0o
z`FZ+IK?Y{}Mh1pv2Bt>F`bkAVUQT{`W}be0d}dx|NqoFsLFFwDo80`A(wtN~kWs}z
G%m4s*+8pr!

literal 0
HcmV?d00001

diff --git a/login/__pycache__/apps.cpython-34.pyc b/login/__pycache__/apps.cpython-34.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9cec6174be1df5891c0fd29ca3a322db8b54b9d5
GIT binary patch
literal 3349
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

literal 0
HcmV?d00001

diff --git a/login/__pycache__/views.cpython-34.pyc b/login/__pycache__/views.cpython-34.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d47ad223bf77c9b864b8c0dc11b99c409c259035
GIT binary patch
literal 7156
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
Otz0c<kq5qA&i)x0KuE#>

literal 0
HcmV?d00001

diff --git a/login/admin.py b/login/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/login/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/user/apps.py b/login/apps.py
similarity index 97%
copy from user/apps.py
copy to login/apps.py
index 1cff706..e784071 100644
--- a/user/apps.py
+++ b/login/apps.py
@@ -5,8 +5,9 @@ from django.utils import six
 from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.http import base36_to_int, int_to_base36
 
-class UserConfig(AppConfig):
-    name = 'user'
+
+class LoginConfig(AppConfig):
+    name = 'login'
 
 class PasswordResetTokenGenerator(object):
     key_salt = "django.contrib.auth.tokens.PasswordResetTokenGenerator"
diff --git a/login/migrations/__init__.py b/login/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/login/models.py b/login/models.py
new file mode 100644
index 0000000..71a8362
--- /dev/null
+++ b/login/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/login/tests.py b/login/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/login/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/user/views.py b/login/views.py
similarity index 69%
copy from user/views.py
copy to login/views.py
index 179c508..5553443 100644
--- a/user/views.py
+++ b/login/views.py
@@ -1,24 +1,17 @@
 from django.shortcuts import render
-
-# Create your views here.
-from django import forms
 from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
-from django.contrib import auth
-from django.core import serializers
-from django.views.decorators.csrf import csrf_exempt, csrf_protect, requires_csrf_token
-from django.views.generic import *
-from django.template import RequestContext, loader
-from django.core.mail import send_mail
-
-from api.models import Users, Role, Acl, Systemlogs
-from api.utility import *
+from django.template import loader
+from api.models import Users, Systemlogs
+from django import forms
 from nocaptcha_recaptcha.fields import NoReCaptchaField
-from datetime import datetime
+from api.utility import md5
 from urllib.request import urlopen
-from br06.settings import *
-from user.apps import br06_token_generator, encrypt, decrypt
-
-import time, urllib, json, hashlib
+from br06.settings import DEFAULT_FROM_EMAIL, SECRET_KEY
+from .apps import br06_token_generator, encrypt, decrypt
+from django.core.mail import send_mail
+from django.views.generic import *
+from datetime import datetime
+import time, json
 
 res_code = [{"CODE": "0"}, {"CODE": "1"}, {"CODE": "2"}]
 timedelta = 10 # set expired time.(minutes)
@@ -48,7 +41,6 @@ def check_user(request):
         print("reCAPTCHA validation failed")
         return json.dumps(res_code[1])
 
-
 def change_passwd(request):
     print("change_passwd")
     if not 'OId' in request.session:
@@ -71,95 +63,9 @@ def change_passwd(request):
     else:
         return HttpResponse(json.dumps(res_code[1]))
 
-
-def user_setting(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    try:
-        obj = Users.objects.get(OId=request.session['OId'])
-        return render(request, 'setting.html', {'active': "setting", 'obj': obj})
-    except:
-        return render(request, 'setting.html', {'active': "setting", 'Email': request.session['Email']})
-
-# User List
-def user_list_view(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    obj = Users.objects.all()
-    # result = json.dumps(serializers.serialize("json", User.objects.all()))
-    result = [res.as_json() for res in obj]
-    index = 0
-    for x in result:
-        x['Index'] = index+1
-        index += 1
-    return render(request, 'user_list.html', {'active': "user_list", 'obj': result})
-
-def user_add_view(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    return render(request, 'user_add.html', { 'Roles': Role.objects.all() } )
-
-def user_update_view(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    try:
-        user = Users.objects.get(OId = request.GET['OId']).as_json()
-        return render(
-            request,
-            'user_update.html',
-            {'obj' : Users.objects.get(OId = request.GET['OId']), 'Roles': Role.objects.all()},
-        )
-    except Exception as e:
-        print (e)
-        return JsonResponse(res_code[1])
-
-def add_user(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    try:
-        Users.objects.create(
-            Account = request.POST['Account'],
-            Name = request.POST['Name'],
-            Email = request.POST['Email'],
-            Password = md5(request.POST['Password']),#md5
-            RoleOId = Role.objects.get(OId = request.POST['RoleOId'])
-        )
-        return JsonResponse(res_code[0])
-    except Exception as e:
-        print (e)
-        return JsonResponse(res_code[1])
-
-def update_user(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    try:
-        Users.objects.filter(OId = request.POST['OId']).update(
-            Name = request.POST['Name'],
-            Password = md5(request.POST['Password']) if request.POST['Password'] else \
-                    Users.objects.get(OId = request.POST['OId']).Password,
-            RoleOId = Role.objects.get(OId = request.POST['RoleOId'])
-        )
-        return JsonResponse(res_code[0])
-    except Exception as e:
-        print (e)
-        return JsonResponse(res_code[1])
-
-def delete_user(request):
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    try:
-        #print( request.POST.get('Account', '') )
-        Users.objects.get(OId = request.POST.get('OId', '')).delete()
-        return JsonResponse(res_code[0])
-    except Exception as e:
-        print (e)
-        return JsonResponse(res_code[1])
-
-
 class RegisterForm(forms.Form):
     captcha = NoReCaptchaField()
 
-
 def login(request):
     if request.method == "POST":
         check_result = json.loads(check_user(request))
@@ -274,7 +180,6 @@ def ResetPasswordRequestView(request):
             email_template_name='registration/password_reset_email.html'
             email = loader.render_to_string(email_template_name, c)
             send_mail(subject_template_name, email, DEFAULT_FROM_EMAIL , [associated.Email], fail_silently=False)
-
             return render(request, 'registration/forget_password.html', {'Result':"Success",'Code': "9999"})
 
         except:
diff --git a/user/apps.py b/user/apps.py
index 1cff706..2c0f53b 100644
--- a/user/apps.py
+++ b/user/apps.py
@@ -1,100 +1,4 @@
 from django.apps import AppConfig
-from datetime import date
-from django.conf import settings
-from django.utils import six
-from django.utils.crypto import constant_time_compare, salted_hmac
-from django.utils.http import base36_to_int, int_to_base36
 
 class UserConfig(AppConfig):
     name = 'user'
-
-class PasswordResetTokenGenerator(object):
-    key_salt = "django.contrib.auth.tokens.PasswordResetTokenGenerator"
-
-    def user_make_token(self, user):
-
-        return self._make_token_with_timestamp(user, self._num_days(self._today()))
-
-    def user_check_token(self, user, token):
-        try:
-            ts_b36, hash = token.split("-")
-        except ValueError:
-            return False
-
-        try:
-            ts = base36_to_int(ts_b36)
-        except ValueError:
-            return False
-
-        if not constant_time_compare(self._make_token_with_timestamp(user, ts), token):
-
-            return False
-
-        if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS:
-
-            return False
-
-        return True
-
-    def _make_token_with_timestamp(self, user, timestamp):
-        ts_b36 = int_to_base36(timestamp)
-
-        hash = salted_hmac(
-            self.key_salt,
-            self._make_hash_value(user, timestamp),
-        ).hexdigest()[::2]
-        return "%s-%s" % (ts_b36, hash)
-
-    def _make_hash_value(self, user, timestamp):
-
-        return (six.text_type(timestamp))
-
-    def _num_days(self, dt):
-
-        return (dt - date(2001, 1, 1)).days
-
-    def _today(self):
-
-        return date.today()
-
-br06_token_generator = PasswordResetTokenGenerator()
-
-
-def encrypt(key, s):
-    b = bytearray(str(s).encode("gbk"))
-    n = len(b)
-    c = bytearray(n*2)
-    j = 0
-    for i in range(0, n):
-        b1 = b[i]
-        b2 = b1 ^ key
-        c1 = b2 % 16
-        c2 = b2 // 16
-        c1 = c1 + 65
-        c2 = c2 + 65
-        c[j] = c1
-        c[j+1] = c2
-        j = j+2
-    return c.decode("gbk")
-
-def decrypt(key, s):
-    c = bytearray(str(s).encode("gbk"))
-    n = len(c)
-    if n % 2 != 0 :
-        return ""
-    n = n // 2
-    b = bytearray(n)
-    j = 0
-    for i in range(0, n):
-        c1 = c[j]
-        c2 = c[j+1]
-        j = j+2
-        c1 = c1 - 65
-        c2 = c2 - 65
-        b2 = c2*16 + c1
-        b1 = b2^ key
-        b[i]= b1
-    try:
-        return b.decode("gbk")
-    except:
-        return "failed"
diff --git a/user/views.py b/user/views.py
index 179c508..2a923c9 100644
--- a/user/views.py
+++ b/user/views.py
@@ -1,76 +1,15 @@
 from django.shortcuts import render
 
 # Create your views here.
-from django import forms
-from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
+from django.http import JsonResponse, HttpResponseRedirect
 from django.contrib import auth
 from django.core import serializers
-from django.views.decorators.csrf import csrf_exempt, csrf_protect, requires_csrf_token
-from django.views.generic import *
-from django.template import RequestContext, loader
-from django.core.mail import send_mail
+from api.models import Users, Role, Acl
+from api.utility import md5
+import json
 
-from api.models import Users, Role, Acl, Systemlogs
-from api.utility import *
-from nocaptcha_recaptcha.fields import NoReCaptchaField
-from datetime import datetime
-from urllib.request import urlopen
-from br06.settings import *
-from user.apps import br06_token_generator, encrypt, decrypt
-
-import time, urllib, json, hashlib
 
 res_code = [{"CODE": "0"}, {"CODE": "1"}, {"CODE": "2"}]
-timedelta = 10 # set expired time.(minutes)
-key = 15
-
-def check_user(request):
-    mail = request.POST.get('email', '')
-    password = md5(request.POST.get('password', ''))
-    #print("mail",mail)
-    #print("password",password)
-    form = RegisterForm(request.POST)
-    data = request.POST
-    response = data.get('g-recaptcha-response')
-    if checkRecaptcha(response,SECRET_KEY):
-        try:
-            obj = Users.objects.get(Email=mail, Password=password)
-            # set session
-            request.session['Account'] = obj.Account
-            request.session['Email'] = obj.Email
-            request.session['Name'] = obj.Name
-            request.session['OId'] = str(obj.OId)
-            return json.dumps(res_code[0])
-        except:
-            print("mail and passsword are not match")
-            return json.dumps(res_code[2])
-    else:
-        print("reCAPTCHA validation failed")
-        return json.dumps(res_code[1])
-
-
-def change_passwd(request):
-    print("change_passwd")
-    if not 'OId' in request.session:
-        return HttpResponseRedirect("/")
-    check_result = json.loads(check_user(request))
-    if check_result["CODE"] == "0":
-        mail = request.session['Email']
-        name = request.POST.get('name', '')
-        password = md5(request.POST.get('password', ''))
-        new_password = request.POST.get('new_password', '')
-        confirm_password = request.POST.get('confirm_password', '')
-        obj = Users.objects.filter(Email=mail, Password=password)
-        if len(obj) == 1:
-            obj.update(Password=new_password,Name=name)
-            return HttpResponse(json.dumps(res_code[0]))
-        else:
-            return HttpResponse(json.dumps(res_code[1]))
-    elif check_result["CODE"] == "2":
-        return HttpResponse(json.dumps(res_code[2]))
-    else:
-        return HttpResponse(json.dumps(res_code[1]))
-
 
 def user_setting(request):
     if not 'OId' in request.session:
@@ -154,130 +93,3 @@ def delete_user(request):
     except Exception as e:
         print (e)
         return JsonResponse(res_code[1])
-
-
-class RegisterForm(forms.Form):
-    captcha = NoReCaptchaField()
-
-
-def login(request):
-    if request.method == "POST":
-        check_result = json.loads(check_user(request))
-        if check_result["CODE"] == "0":
-            logContent= request.session['Name']+' login success.'
-            Systemlogs.objects.create(Category="User",LogContent=logContent)
-            return HttpResponseRedirect("/user_list")
-        elif check_result["CODE"] == "1":
-            return render(request, 'login.html', {'Result':"Fail",'Code': "9998","Message":"reCAPTCHA validation failed"})
-        elif check_result["CODE"] == "2":
-            # TODO: Need store this log fail to DB?
-            return render(request, 'login.html', {'Result':"Fail",'Code': "9999","Message":"Wrong password or account"})
-    request.session.set_test_cookie()
-    return render(request, 'login.html', {'CODE': ""})
-
-
-def checkRecaptcha(response, secretkey):
-    url = 'https://www.google.com/recaptcha/api/siteverify?'
-    url = url + 'secret=' +secretkey
-    url = url + '&response=' +response
-    try:
-        jsonobj = json.loads(urlopen(url).read().decode('utf-8'))
-        if jsonobj['success']:
-            return True
-        else:
-            return False
-    except Exception as e:
-        print (e)
-        return False
-
-
-def logout(request):
-    request.session.flush()
-    return HttpResponseRedirect("/")
-
-
-def password_reset_confirm(request, uidb64=None, times=None, token=None,
-                           template_name='registration/reset_password.html'):
-
-    assert uidb64 is not None and times is not None and token is not None
-    account = decrypt(key, uidb64)
-    match = br06_token_generator.user_check_token(account, token)
-
-    if match is not True:
-        print ('/user/views.password_reset_confirm: token match error')
-        return render(request, 'registration/not_found.html', {'Result':"Fail",'Code': ""})
-
-    if request.method == 'POST':
-        new_password = md5(request.POST.get('new_password', ''))
-        confirm_password = md5(request.POST.get('confirm_password', ''))
-        if new_password == confirm_password:
-            try:
-                obj = Users.objects.filter(Account = account).update(Password = new_password)
-                Users.objects.filter(Account = account).update(UpdateDate = datetime.now())
-                return render(request, 'registration/password_reset_complete.html', {'Result':"Success",'Code': ""})
-            except:
-                print ("/user/views.password_reset_confirm: update database error")
-                return render(request, template_name, {'Result':"Fail",'Code': "0000","Message":"Update error. Please contact us."})
-        else:
-            return render(request, template_name, {'Result':"Fail",'Code': "1111","Message":"Password not match."})
-
-    try:
-        associated = Users.objects.get(Account = account)
-        email = associated.Email
-        update_time = associated.UpdateDate
-        update_time_ts = time.mktime(update_time.timetuple())
-
-        starttime = float(decrypt(key, times))
-        nowtime = time.time()
-        time_limit = starttime + timedelta*60
-
-        if time_limit < nowtime:
-            print ("Expired time :", time.strftime('%Y-%m-%d %H:%M:%S+00:00',time.localtime(time_limit)))
-            return render(request, 'registration/not_found.html', {'Result':"Fail",'Code': "0000","Message":"Link expired"})
-        elif starttime < update_time_ts:
-            print ("Password has been changed, Last change password time :", update_time)
-            return render(request, 'registration/not_found.html', {'Result':"Fail",'Code': "1111","Message":"Password has been updated"})
-        else:
-            return render(request, template_name, {'Result':"Success",'Code': ""})
-
-    except:
-        print("/user/views.password_reset_confirm: get database error")
-        return render(request, 'registration/not_found.html', {'Result':"Fail",'Code': ""})
-
-
-def get_users(email):
-    active = Users.objects.filter(Email = email)
-    return (u for u in active)
-
-
-def ResetPasswordRequestView(request):
-    if request.method == "POST":
-        mail = request.POST.get('email', '')
-        try:
-            associated = Users.objects.get(Email = mail)
-            starttime = time.time()
-            time_encrypt = encrypt(key, starttime)
-            account_encrypt = encrypt(key, associated.Account)
-            for account in get_users(associated.Email):
-                c = {
-                        'email': associated.Email,
-                        'domain': request.META['HTTP_HOST'],
-                        'site_name': 'Shuttle BR06',
-                        'expired': timedelta,
-                        'uid': account_encrypt,
-                        'user': associated.Account,
-                        'token': br06_token_generator.user_make_token(account),
-                        'times': time_encrypt,
-                        'protocol': 'http',
-                }
-            subject_template_name='Password reset on Shuttle BR06'
-            email_template_name='registration/password_reset_email.html'
-            email = loader.render_to_string(email_template_name, c)
-            send_mail(subject_template_name, email, DEFAULT_FROM_EMAIL , [associated.Email], fail_silently=False)
-
-            return render(request, 'registration/forget_password.html', {'Result':"Success",'Code': "9999"})
-
-        except:
-            return render(request, 'registration/forget_password.html', {'Result':"Fail",'Code': "0000"})
-
-    return render(request, 'registration/forget_password.html', {'CODE': ""})
-- 
1.9.1

