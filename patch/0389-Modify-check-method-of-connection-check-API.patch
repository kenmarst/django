From a8b0ebc74d0b26d8a73d280c539690e5517f5b2b Mon Sep 17 00:00:00 2001
From: Wellens <wellens@tw.shuttle.com>
Date: Fri, 2 Dec 2016 17:11:18 +0800
Subject: [PATCH 389/443] Modify check method of connection check API.

Modify check method from IP to MAC of connection check and get.
---
 api/connection.py | 39 +++++++++++++++++++++------------------
 1 file changed, 21 insertions(+), 18 deletions(-)

diff --git a/api/connection.py b/api/connection.py
index f36ff70..8ecbc83 100755
--- a/api/connection.py
+++ b/api/connection.py
@@ -3,6 +3,7 @@ from collections import ChainMap
 from django.http import JsonResponse
 from django.views.decorators.csrf import csrf_exempt
 from datetime import datetime
+from api.models import Devices
 
 result_success = {'Result' : 'Success'}
 result_fail = {'Result' : 'Fail'}
@@ -13,17 +14,21 @@ message_method_error = {'Message' : 'method error'}
 def check(request):
     if request.method == 'POST':
         try:
-            client_ip = request.META['REMOTE_ADDR']
-            from api.models import Devices
-            devices = Devices.objects.filter(MAC = request.POST.get('MAC', ''))
-            if devices.count() == 1:
-                states = {'Proposed' : 0, 'Approved' : 1, 'Online' : 1, 'Offline' : 1, 'Setting' : 2, 'Getting' : 3, 'Upgrade' : 4}
-                devices.update(IP = client_ip, UpdateDate = datetime.now())
-                return JsonResponse({'Result' : states[devices[0].State]})
-            elif devices.count() == 0:
-                Devices.objects.create(Name = request.POST.get('Name', ''), MAC = request.POST.get('MAC', ''), IP = client_ip)
-                return JsonResponse({'Result' : 0})
-            raise Exception('Duplicate MAC address conflicts, please check the number of devices in the server.')
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'Name', 'MAC'}
+            if all(k in req for k in req_key):
+                devices = Devices.objects.filter(MAC = req['MAC'])
+                client_ip = request.META['REMOTE_ADDR']
+                if devices.count() == 1:
+                    states = {'Proposed' : 0, 'Approved' : 1, 'Online' : 1, 'Offline' : 1, 'Setting' : 2, 'Getting' : 3, 'Upgrade' : 4}
+                    devices.update(IP = client_ip, UpdateDate = datetime.now())
+                    return JsonResponse({'Result' : states[devices[0].State]})
+                elif devices.count() == 0:
+                    Devices.objects.create(Name = req['Name'], MAC = req['MAC'], IP = client_ip)
+                    return JsonResponse({'Result' : 0})
+                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Duplicate MAC address conflicts, please check the number of devices in the server.'})))
+            else:
+                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Request parameter error'})))
         except Exception as e:
             return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(e)})))
     else:
@@ -34,7 +39,6 @@ def get(request):
     if request.method == 'POST':
         try:
             client_ip = request.META['REMOTE_ADDR']
-            from api.models import Devices
             devices = Devices.objects.get(IP = client_ip)
             if devices.State == 'Proposed':
                 return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
@@ -71,21 +75,20 @@ def get(request):
 def set(request):
     if request.method == 'POST':
         try:
-            client_ip = request.META['REMOTE_ADDR']
-            from api.models import Devices
-            devices = Devices.objects.get(IP = client_ip)
-            if devices.State == 'Proposed':
-                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
             req = json.loads(request.body.decode('utf-8'))
             req_key = {
-                'Name', 'MAC', 'Type', 'Model', 'WelcomeR0Action', 'WelcomeR0Pulse', 'WelcomeR1Action', 'WelcomeR1Pulse',
+                'Name', 'MAC', 'Version', 'Type', 'Model', 'WelcomeR0Action', 'WelcomeR0Pulse', 'WelcomeR1Action', 'WelcomeR1Pulse',
                 'AccessDeniedR0Action', 'AccessDeniedR0Pulse', 'AccessDeniedR1Action', 'AccessDeniedR1Pulse',
                 'Timeout', 'ScreenSaver', 'NTP', 'Timezone', 'Audio', 'FaceBioScore', 'FingerBioScore', 'Language'
             }
             if all(k in req for k in req_key):
+                devices = Devices.objects.get(MAC = req['MAC'])
+                if devices.State == 'Proposed':
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
                 devices.State = 'Getting'
                 devices.Name = req['Name'] or devices.Name
                 devices.MAC = req['MAC'] or devices.MAC
+                devices.Version = req['Version'] or devices.Version
                 devices.Type = req['Type'] or devices.Type
                 devices.Model = req['Model'] or devices.Model
                 devices.WelcomeR0Action = req['WelcomeR0Action'] or devices.WelcomeR0Action
-- 
1.9.1

