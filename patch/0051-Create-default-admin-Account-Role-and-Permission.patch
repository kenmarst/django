From 1f1443efe29c85acb4e3a1ebe6d6260f617d81e8 Mon Sep 17 00:00:00 2001
From: Bret Liu <Bret_liu@tw.shuttle.com>
Date: Thu, 19 May 2016 14:59:42 +0800
Subject: [PATCH 051/443] Create default admin Account, Role and Permission.

---
 br06/settings.py |  4 ++++
 user/views.py    | 73 +++++++++++++++++++++++++++++++++++++++++---------------
 2 files changed, 58 insertions(+), 19 deletions(-)

diff --git a/br06/settings.py b/br06/settings.py
index 699defd..b0414f3 100644
--- a/br06/settings.py
+++ b/br06/settings.py
@@ -25,6 +25,10 @@ SECRET_KEY = '6LcOCx4TAAAAAPE6AF6FY3ZNe-v8ze6fp-PDBvch'
 # SECURITY WARNING: don't run with debug turned on in production!
 DEBUG = True
 
+#default admin login email & password
+ADMIN_MAIL = 'admin@tw.shuttle.com'
+ADMIN_PASSWORD = '5f4dcc3b5aa765d61d8327deb882cf99'
+
 ALLOWED_HOSTS = []
 
 
diff --git a/user/views.py b/user/views.py
index ce49e3a..5c3271f 100644
--- a/user/views.py
+++ b/user/views.py
@@ -1,33 +1,68 @@
 from django.shortcuts import render
 
 # Create your views here.
-from datetime import datetime
-from django.http import HttpResponse
-from api.models import Users,Role,Systemlogs
-from django.shortcuts import render
+from django import forms
+from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
 from django.contrib import auth
-from django.http import HttpResponseRedirect
-from django.http import JsonResponse
 from django.core import serializers
-import json
-import hashlib
 from django.views.decorators.csrf import csrf_exempt, csrf_protect, requires_csrf_token
-from django.template import RequestContext
+from django.views.generic import *
+from django.template import RequestContext, loader
+from django.core.mail import send_mail
+
+from api.models import Users, Role, Acl, Systemlogs
+from api.utility import *
 from nocaptcha_recaptcha.fields import NoReCaptchaField
-from django import forms
-import urllib
+from datetime import datetime
 from urllib.request import urlopen
 from br06.settings import *
-from api.utility import *
-from django.template import loader
-import time
 from user.apps import br06_token_generator, encrypt, decrypt
-from django.core.mail import send_mail
-from django.views.generic import *
 
-#Users.objects.create(Account='admin', Password='e10adc3949ba59abbe56e057f20f883e', Name='SU3', Email='kimi_tsai@tw.shuttle.com', RoleOId=uuid.uuid1)
-# b = User.objects.get(id="5")
-# b.delete()
+import time, urllib, json, hashlib
+
+# create default role: admin, users.
+try:
+    Role.objects.get(Name = 'admin').Name
+except:
+    print('create default role: admin')
+    Role.objects.create(Name = 'admin', Sort = '1', Category = 'System')
+    Acl.objects.create(FunctionName = 'permission_system', RoleOId = Role.objects.get(Name = 'admin'), ACL = 'Enable')
+    Acl.objects.create(FunctionName = 'premission_device', RoleOId = Role.objects.get(Name = 'admin'), ACL = 'Enable')
+    Acl.objects.create(FunctionName = 'permission_fruserlist', RoleOId = Role.objects.get(Name = 'admin'), ACL = 'Enable')
+    Acl.objects.create(FunctionName = 'permission_frusergroup', RoleOId = Role.objects.get(Name = 'admin'), ACL = 'Enable')
+    Acl.objects.create(FunctionName = 'permission_log', RoleOId = Role.objects.get(Name = 'admin'), ACL = 'Enable')
+else:
+    print('default role "admin" exist.')
+
+try:
+    Role.objects.get(Name = 'users').Name
+except:
+    print('create default role: users')
+    Role.objects.create(Name = 'users', Sort = '2', Category = 'System')
+    Acl.objects.create(FunctionName = 'permission_system', RoleOId = Role.objects.get(Name = 'users'), ACL = 'disable')
+    Acl.objects.create(FunctionName = 'premission_device', RoleOId = Role.objects.get(Name = 'users'), ACL = 'disable')
+    Acl.objects.create(FunctionName = 'permission_fruserlist', RoleOId = Role.objects.get(Name = 'users'), ACL = 'disable')
+    Acl.objects.create(FunctionName = 'permission_frusergroup', RoleOId = Role.objects.get(Name = 'users'), ACL = 'disable')
+    Acl.objects.create(FunctionName = 'permission_log', RoleOId = Role.objects.get(Name = 'users'), ACL = 'disable')
+else:
+    print('default role "users" exist.')
+
+# create and update default account: admin.
+try:
+    Users.objects.get(Account = 'admin').Account
+except:
+    print('create default account: admin')
+    Users.objects.create(Account = 'admin', Password = ADMIN_PASSWORD, Name = 'admin',
+                         Email = ADMIN_MAIL, RoleOId = Role.objects.get(Name = 'admin'))
+else:
+    print('default account "admin" exist.')
+    if Users.objects.get(Account = 'admin').Email != ADMIN_MAIL:
+        print('update admin email.')
+        Users.objects.filter(Account = 'admin').update(Email = ADMIN_MAIL)
+
+    if Users.objects.get(Account = 'admin').Password != ADMIN_PASSWORD:
+        print('update admin password.')
+        Users.objects.filter(Account = 'admin').update(Password = ADMIN_PASSWORD)
 
 res_code = [{"CODE": "0"}, {"CODE": "1"}, {"CODE": "2"}]
 timedelta = 10 # set expired time.(minutes)
-- 
1.9.1

