From 81f55572ab3990ec34c0e6f364f82aa8a0be306d Mon Sep 17 00:00:00 2001
From: Neon Chen <neon_chen@tw.shuttle.com>
Date: Tue, 24 May 2016 18:51:48 +0800
Subject: [PATCH 074/443] Modify Users Management API : User List

change request to json format
---
 api/user.py | 68 +++++++++++++++++++++++++++++++++----------------------------
 1 file changed, 37 insertions(+), 31 deletions(-)

diff --git a/api/user.py b/api/user.py
index 2373f41..e1bbe27 100644
--- a/api/user.py
+++ b/api/user.py
@@ -138,39 +138,45 @@ def delete(request):
 def list(request):
     if request.method == 'POST':
         try:
-            if Devices.objects.get(IP = request.META['REMOTE_ADDR']).State != 'Proposed':
-                frusers = Frusers.objects.filter(State = "Enable")
-                #print('Field : ', request.POST['Field'], 'Keyword : ',request.POST['Keyword'])
-                number = 0
-                frusers_field = []
-                FlipPage = ( int( request.POST['FlipPage'] ) - 1 ) * 5
-                # query Keyword of Field in fruser
-                for k in frusers :
-                    if k.as_json()[ request.POST['Field'] ] == request.POST['Keyword']:
-                        number = number + 1
-                        frusers_field.append(k.as_json())
-                if frusers_field:
-                    return JsonResponse(dict(ChainMap(result_success, {
-                        'Numbers' : number,
-                        'CurrentPage' : int ( request.POST['FlipPage'] ),
-                        'TotalPage' : int ( number / 5  ) + 1,
-                        'Users' : [{
-                            'FRUserId' : i['FRUserId'],
-                            'Name' : i['Name'],
-                            'Gender' : i['Gender'],
-                            'Age' : i['Age'],
-                            'RFIDCard' : i['RFIDCard'],
-                            'State' : i['State'],
-                            'Groups' : [{
-                                'Oid' : j.GroupOId.OId,
-                                'Name' : j.GroupOId.Name
-                            } for j in Frusergroupmember.objects.filter(FRUserOId = i['OId'])]
-                        } for i in frusers_field[ FlipPage : FlipPage + 5]] # ex:[ 0 : 5 ] => 5 frusers / 1 page
-                    })))
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'Field', 'Keyword', 'FlipPage'}
+            if all(k in req for k in req_key) and all(req.values()):
+                if Devices.objects.get(IP = request.META['REMOTE_ADDR']).State != 'Proposed':
+                    frusers = Frusers.objects.filter(State = "Enable")
+                    print('Field : ', req['Field'], 'Keyword : ',req['Keyword'])
+                    number = 0
+                    frusers_field = []
+                    FlipPage = ( int( req['FlipPage'] ) - 1 ) * 5
+                    # query Keyword of Field in fruser
+                    for k in frusers :
+                        if k.as_json()[ req['Field'] ] == req['Keyword']:
+                            number = number + 1
+                            frusers_field.append(k.as_json())
+                    if frusers_field:
+                        return JsonResponse(dict(ChainMap(result_success, {
+                            'Numbers' : number,
+                            'CurrentPage' : int ( req['FlipPage'] ),
+                            'TotalPage' : int ( number / 5  ) + 1,
+                            'Users' : [{
+                                'FRUserId' : i['FRUserId'],
+                                'Name' : i['Name'],
+                                'Gender' : i['Gender'],
+                                'Age' : i['Age'],
+                                'RFIDCard' : i['RFIDCard'],
+                                'State' : i['State'],
+                                'Groups' : [{
+                                    'Oid' : j.GroupOId.OId,
+                                    'Name' : j.GroupOId.Name
+                                } for j in Frusergroupmember.objects.filter(FRUserOId = i['OId'])]
+                            } for i in frusers_field[ FlipPage : FlipPage + 5]] # ex:[ 0 : 5 ] => 5 frusers / 1 page
+                        })))
+                    else:
+                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Frusers matching query does not exist.'})))
                 else:
-                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Frusers matching query does not exist.'})))
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
             else:
-                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : 'Need accept'})))
+                logContent = 'Request parameter error'
+                return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : logContent})))
         except Exception as error:
             print(str(error))
             return JsonResponse(dict(ChainMap(result_fail, fail_code999, {'Message' : str(error)})))
-- 
1.9.1

