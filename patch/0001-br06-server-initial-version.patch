From 945de62bb2ee95304480279241b94fc229a11ce2 Mon Sep 17 00:00:00 2001
From: jesse <jesse@shuttle.com>
Date: Mon, 18 Apr 2016 15:50:29 +0800
Subject: [PATCH 001/443] br06 server initial version

---
 api/admin.py       |  19 ++++
 api/connection.py  |  82 ++++++++++++++
 api/face.py        |  66 +++++++++++
 api/group.py       |  23 ++++
 api/models.py      | 326 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 api/recognition.py | 119 +++++++++++++++++++
 api/user.py        |  80 +++++++++++++
 br06/settings.py   | 125 ++++++++++++++++++++
 br06/urls.py       |  53 +++++++++
 9 files changed, 893 insertions(+)
 create mode 100644 api/admin.py
 create mode 100644 api/connection.py
 create mode 100644 api/face.py
 create mode 100644 api/group.py
 create mode 100644 api/models.py
 create mode 100644 api/recognition.py
 create mode 100644 api/user.py
 create mode 100644 br06/settings.py
 create mode 100644 br06/urls.py

diff --git a/api/admin.py b/api/admin.py
new file mode 100644
index 0000000..73a41cc
--- /dev/null
+++ b/api/admin.py
@@ -0,0 +1,19 @@
+from django.contrib import admin
+
+# Register your models here.
+from .models import *
+
+admin.site.register(Config)
+admin.site.register(Role)
+admin.site.register(Acl)
+admin.site.register(Devices)
+admin.site.register(Users)
+admin.site.register(Usergroups)
+admin.site.register(Usergroupmember)
+admin.site.register(Usergroupdevices)
+admin.site.register(Frusers)
+admin.site.register(Frusergroups)
+admin.site.register(Frusergroupmember)
+admin.site.register(Frusergroupdevices)
+admin.site.register(Fruserlogs)
+admin.site.register(Systemlogs)
diff --git a/api/connection.py b/api/connection.py
new file mode 100644
index 0000000..3a35088
--- /dev/null
+++ b/api/connection.py
@@ -0,0 +1,82 @@
+#-*-coding:utf-8-*-
+
+import json, requests
+from collections import ChainMap
+from django.http import HttpResponse, JsonResponse
+
+result_success = {'Result':'Success'}
+result_fail = {'Result':'Fail'}
+fail_code999 = {'Code':'9999'}
+fail_message = {'Message':'xxxxxxxxxxxxxxxx'}
+
+def check(request):
+    if request.method == 'POST':
+        try:
+            """response note
+            enter code
+
+            you can refer to the following method:
+            if success, enter values to below variables:
+            result
+            then user like below code to response:
+            res = {'Result' : result}
+
+            if error, use like below code to response:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+            """
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def get(request):
+    if request.method == 'POST':
+        try:
+            """response note
+            enter code
+
+            you can refer to the following method:
+            if success, enter values to below variables:
+            welcome, accessdenied, screensaver, ntp, timezone, audio, bioscore, language
+            then user like below code to response:
+            res = dict(ChainMap(result_success, {
+                'Welcome' : welcome,
+                'AccessDenied' : accessdenied,
+                'ScreenSaver' : screensaver,
+                'NTP' : ntp,
+                'Timezone' : timezone,
+                'Audio' : audio,
+                'BioScore' : bioscore,
+                'Language' : language
+            }))
+
+            if error, use like below code to response:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+            """
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def set(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'Welcome', 'AccessDenied', 'ScreenSaver', 'NTP', 'Timezone', 'Audio', 'BioScore', 'Language'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_success)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
diff --git a/api/face.py b/api/face.py
new file mode 100644
index 0000000..05d23d5
--- /dev/null
+++ b/api/face.py
@@ -0,0 +1,66 @@
+#-*-coding:utf-8-*-
+
+import json, requests
+from collections import ChainMap
+from django.http import HttpResponse, JsonResponse
+
+result_success = {'Result':'Success'}
+result_fail = {'Result':'Fail'}
+fail_code999 = {'Code':'9999'}
+fail_message = {'Message':'xxxxxxxxxxxxxxxx'}
+
+def add(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_success)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def delete(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_success)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def list(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
diff --git a/api/group.py b/api/group.py
new file mode 100644
index 0000000..1c27fec
--- /dev/null
+++ b/api/group.py
@@ -0,0 +1,23 @@
+#-*-coding:utf-8-*-
+
+import json, requests
+from collections import ChainMap
+from django.http import HttpResponse, JsonResponse
+
+result_success = {'Result':'Success'}
+result_fail = {'Result':'Fail'}
+fail_code999 = {'Code':'9999'}
+fail_message = {'Message':'xxxxxxxxxxxxxxxx'}
+
+def list(request):
+    if request.method == 'POST':
+        try:
+            """
+            enter code
+            """
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
diff --git a/api/models.py b/api/models.py
new file mode 100644
index 0000000..476fd20
--- /dev/null
+++ b/api/models.py
@@ -0,0 +1,326 @@
+from __future__ import unicode_literals
+
+from django.db import models
+import uuid
+
+class Config(models.Model):
+    config_name = (
+            ('BackupMethod', 'BackupMethod'),
+            ('BackupScheduling', 'BackupScheduling'),
+            ('BackupMonthlyDate', 'BackupMonthlyDate'),
+            ('BackupWeeklyDate', 'BackupWeeklyDate'),
+            ('BackupTime', 'BackupTime'),
+            ('BackupLocation', 'BackupLocation'),
+            ('BackupLocal', 'BackupLocal'),
+            ('BackupRemoteHost', 'BackupRemoteHost'),
+            ('BackupRemotePort', 'BackupRemotePort'),
+            ('BackupRemoteAccount', 'BackupRemoteAccount'),
+            ('BackupRemotePassword', 'BackupRemotePassword'),
+            ('LogLimit', 'LogLimit'),
+            ('LogPreservation', 'LogPreservation'),
+            ('PicCreateSave', 'PicCreateSave'),
+            ('PicFaceSave', 'PicFaceSave'),
+    )
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    name = models.CharField(db_column = 'Name', choices = config_name, unique = True, max_length = 32)
+    value = models.CharField(db_column = 'Value', max_length = 512)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'config'
+
+    def __str__(self):
+        return '%s (%s)' % (self.name, self.oid)
+
+
+class Role(models.Model):
+    role_category = (
+            ('System', 'System'),
+            ('User', 'User'),
+    )
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    name = models.CharField(db_column = 'Name', unique = True, max_length = 32)
+    sort = models.IntegerField(db_column = 'Sort')
+    category = models.CharField(db_column = 'Category', choices = role_category, default = 'User', max_length = 68)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'role'
+
+    def __str__(self):
+        return '%s (%s)' % (self.name, self.oid)
+
+
+class Acl(models.Model):
+    acl_acl = (
+            ('Enable', 'Enable'),
+            ('Disable', 'Disable'),
+    )
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    functionname = models.CharField(db_column = 'FunctionName', max_length = 32)
+    roleoid = models.ForeignKey('Role', on_delete = models.CASCADE, db_column = 'RoleOId', max_length = 36)
+    acl = models.CharField(db_column = 'ACL', choices = acl_acl, default = 'Enable', max_length = 8)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'acl'
+
+    def __str__(self):
+        return '%s (%s)' % (self.functionname, self.oid)
+
+
+class Devices(models.Model):
+    devices_state = (
+            ('Proposed', 'Proposed'),
+            ('Approved', 'Approved'),
+            ('Setting', 'Setting'),
+            ('Getting', 'Getting'),
+            ('Online', 'Online'),
+            ('Offline', 'Offline'),
+    )
+    devices_welcome = (
+            ('Do0', 'None'),
+            ('Do1', 'Pulse 3 Sec'),
+    )
+    devices_accessdenied = (
+            ('Do0', 'On'),
+            ('Do1', 'Off'),
+    )
+    devices_screensaver = (
+            ('5', '5 Minutes'),
+            ('30', '30 Minutes'),
+            ('60', '60 Minutes'),
+    )
+    devices_timezone = (
+            ('UTC-12', 'UTC-12'),
+            ('UTC-11', 'UTC-11'),
+            ('UTC-10', 'UTC-10'),
+            ('UTC-9', 'UTC-9'),
+            ('UTC-8', 'UTC-8'),
+            ('UTC-7', 'UTC-7'),
+            ('UTC-6', 'UTC-6'),
+            ('UTC-5', 'UTC-5'),
+            ('UTC-4', 'UTC-4'),
+            ('UTC-3', 'UTC-3'),
+            ('UTC-2', 'UTC-2'),
+            ('UTC-1', 'UTC-1'),
+            ('UTC+0', 'UTC+0'),
+            ('UTC+1', 'UTC+1'),
+            ('UTC+2', 'UTC+2'),
+            ('UTC+3', 'UTC+3'),
+            ('UTC+4', 'UTC+4'),
+            ('UTC+5', 'UTC+5'),
+            ('UTC+6', 'UTC+6'),
+            ('UTC+7', 'UTC+7'),
+            ('UTC+8', 'UTC+8'),
+            ('UTC+9', 'UTC+9'),
+            ('UTC+10', 'UTC+10'),
+            ('UTC+11', 'UTC+11'),
+            ('UTC+12', 'UTC+12'),
+            ('UTC+13', 'UTC+13'),
+            ('UTC+14', 'UTC+14'),
+    )
+    devices_audio = (
+            ('Enable', 'Enable'),
+            ('Disable', 'Disable'),
+    )
+    devices_bioscore = (
+            ('Low', 'Low'),
+            ('Medium', 'Medium'),
+            ('High', 'High'),
+    )
+    devices_language = (
+            ('en', 'en'),
+            ('zh-cn', 'zh-cn'),
+            ('zh-tw', 'zh-tw'),
+    )
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    name = models.CharField(db_column = 'Name', unique = True, max_length = 32)
+    state = models.CharField(db_column = 'State', choices = devices_state, default = 'Proposed', max_length = 8)
+    mac = models.CharField(db_column = 'MAC', max_length = 32, blank = True, null = True)
+    ip = models.GenericIPAddressField(db_column = 'IP', max_length = 32, blank = True, null = True)
+    welcome = models.CharField(db_column = 'Welcome', choices = devices_welcome, max_length = 8, blank = True, null = True)
+    accessdenied = models.CharField(db_column = 'AccessDenied', choices = devices_accessdenied, max_length = 8, blank = True, null = True)
+    screensaver = models.CharField(db_column = 'ScreenSaver', choices = devices_screensaver, max_length = 8, blank = True, null = True)
+    ntp = models.CharField(db_column = 'NTP', max_length = 256, blank = True, null = True)
+    timezone = models.CharField(db_column = 'Timezone', choices = devices_timezone, max_length = 8, blank = True, null = True)
+    audio = models.CharField(db_column = 'Audio', choices = devices_audio, max_length = 8, blank = True, null = True)
+    bioscore = models.CharField(db_column = 'BioScore', choices = devices_bioscore, max_length = 8, blank = True, null = True)
+    language = models.CharField(db_column = 'Language', choices = devices_language, max_length = 8, blank = True, null = True)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'devices'
+
+    def __str__(self):
+        return '%s (%s)' % (self.name, self.oid)
+
+
+class Users(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    account = models.CharField(db_column = 'Account', unique = True, max_length = 255)
+    password = models.CharField(db_column = 'Password', max_length = 64)
+    name = models.CharField(db_column = 'Name', max_length = 32, blank = True, null = True)
+    email = models.EmailField(db_column = 'Email', max_length = 256, blank = True, null = True)
+    roleoid = models.ForeignKey(Role, on_delete = models.CASCADE, db_column = 'RoleOId', max_length = 36)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'users'
+
+    def __str__(self):
+        return '%s (%s)' % (self.account, self.oid)
+
+
+class Usergroups(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    name = models.CharField(db_column = 'Name', unique = True, max_length = 32)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'usergroups'
+
+    def __str__(self):
+        return '%s (%s)' % (self.name, self.oid)
+
+
+class Usergroupmember(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    groupoid = models.ForeignKey('Usergroups', on_delete = models.CASCADE, db_column = 'GroupOId', max_length = 36)
+    useroid = models.ForeignKey('Users', on_delete = models.CASCADE, db_column = 'UserOId', max_length = 36)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'usergroupmember'
+
+    def __str__(self):
+        return '%s %s' % (self.groupoid, self.useroid)
+
+
+class Usergroupdevices(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    groupoid = models.ForeignKey('Usergroups', on_delete = models.CASCADE, db_column = 'GroupOId', max_length = 36)
+    deviceoid = models.ForeignKey('Devices', on_delete = models.CASCADE, db_column = 'DeviceOId', max_length = 36)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'usergroupdevices'
+
+    def __str__(self):
+        return '%s %s' % (self.groupoid, self.deviceoid)
+
+
+class Frusers(models.Model):
+    frusers_gender = (
+            ('Male', 'Male'),
+            ('Female', 'Female'),
+    )
+    frusers_state = (
+            ('Enable', 'Enable'),
+            ('Disable', 'Disable'),
+    )
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    fruserid = models.CharField(db_column = 'FRUserId', max_length = 16)
+    name = models.CharField(db_column = 'Name', max_length = 32, blank = True, null = True)
+    gender = models.CharField(db_column = 'Gender', choices = frusers_gender, max_length = 8, blank = True, null = True)
+    age = models.IntegerField(db_column = 'Age', blank = True, null = True)
+    personid = models.CharField(db_column = 'PersonId', max_length = 32, blank = True, null = True)
+    face1 = models.CharField(db_column = 'Face1', max_length = 256, blank = True, null = True)
+    face2 = models.CharField(db_column = 'Face2', max_length = 256, blank = True, null = True)
+    face3 = models.CharField(db_column = 'Face3', max_length = 256, blank = True, null = True)
+    faceid1 = models.CharField(db_column = 'FaceID1', max_length = 32, blank = True, null = True)
+    faceid2 = models.CharField(db_column = 'FaceID2', max_length = 32, blank = True, null = True)
+    faceid3 = models.CharField(db_column = 'FaceID3', max_length = 32, blank = True, null = True)
+    rfidcard = models.CharField(db_column = 'RFIDCard', max_length = 16, blank = True, null = True)
+    state = models.CharField(db_column = 'State', choices = frusers_state, default = 'Enable', max_length = 8)
+    disablecauses = models.CharField(db_column = 'DisableCauses', max_length = 256, blank = True, null = True)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'frusers'
+
+    def __str__(self):
+        return '%s %s (%s)' % (self.fruserid, self.name, self.oid)
+
+
+class Frusergroups(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    name = models.CharField(db_column = 'Name', unique = True, max_length = 32)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'frusergroups'
+
+    def __str__(self):
+        return '%s (%s)' % (self.name, self.oid)
+
+
+class Frusergroupmember(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    groupoid = models.ForeignKey('Frusergroups', on_delete = models.CASCADE, db_column = 'GroupOId', max_length = 36)
+    fruseroid = models.ForeignKey('Frusers', on_delete = models.CASCADE, db_column = 'FRUserOId', max_length = 36)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'frusergroupmember'
+
+    def __str__(self):
+        return '%s %s' % (self.groupoid, self.fruseroid)
+
+
+class Frusergroupdevices(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    groupoid = models.ForeignKey('Frusergroups', on_delete = models.CASCADE, db_column = 'GroupOId', max_length = 36)
+    deviceoid = models.ForeignKey('Devices', on_delete = models.CASCADE, db_column = 'DeviceOId', max_length = 36)
+    createdate = models.DateTimeField(db_column = 'CreateDate', auto_now_add = True)
+    updatedate = models.DateTimeField(db_column = 'UpdateDate', auto_now = True)
+
+    class Meta:
+        db_table = 'frusergroupdevices'
+
+    def __str__(self):
+        return '%s %s' % (self.groupoid, self.deviceoid)
+
+
+class Fruserlogs(models.Model):
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    logdatetime = models.DateTimeField(db_column = 'LogDateTime', auto_now_add =  True)
+    fruseroid = models.ForeignKey('Frusers', on_delete = models.CASCADE, db_column = 'FRUserOId', max_length = 36)
+    deviceoid = models.ForeignKey('Devices', on_delete = models.CASCADE, db_column = 'DeviceOId', max_length = 36)
+    logcontent = models.CharField(db_column = 'LogContent', max_length = 256, blank = True, null = True)
+
+    class Meta:
+        db_table = 'fruserlogs'
+
+    def __str__(self):
+        return '%s %s' % (self.fruseroid,  self.deviceoid)
+
+
+class Systemlogs(models.Model):
+    systemlogs_category = (
+            ('System', 'System'),
+            ('Device', 'Device'),
+            ('User', 'User'),
+            ('FRUser', 'FRUser'),
+    )
+    oid = models.CharField(db_column = 'OId', primary_key = True, default = uuid.uuid1, max_length = 36)
+    logdatetime = models.DateTimeField(db_column = 'LogDateTime', auto_now_add = True)
+    category = models.CharField(db_column = 'Category', choices = systemlogs_category, max_length = 8)
+    logcontent = models.CharField(db_column = 'LogContent', max_length = 256, blank = True, null = True)
+
+    class Meta:
+        db_table = 'systemlogs'
+
+    def __str__(self):
+        return '%s %s' % (self.category, self.logdatetime)
diff --git a/api/recognition.py b/api/recognition.py
new file mode 100644
index 0000000..e8decd4
--- /dev/null
+++ b/api/recognition.py
@@ -0,0 +1,119 @@
+#-*-coding:utf-8-*-
+
+import json, requests
+from collections import ChainMap
+from django.http import HttpResponse, JsonResponse
+
+result_success = {'Result':'Success'}
+result_pass = {'Result':'Pass'}
+result_fail = {'Result':'Fail'}
+fail_code999 = {'Code':'9999'}
+fail_message = {'Message':'xxxxxxxxxxxxxxxx'}
+
+def face_verify(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_pass)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def face_identify(request):
+    if request.method == 'POST':
+        try:
+            """response note
+            enter code
+
+            you can refer to the following method:
+            if success, enter values to below variables:
+            fruserid
+            then use like below code to response:
+            res = dict(ChainMap(result_pass, {'FRUserId':fruserid}))
+
+            if error, use like below code to response:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+            """
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def face_check(request):
+    if request.method == 'POST':
+        try:
+            """
+            enter code
+            """
+            res = dict(result_success)
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def rfid_verify(request):
+    if request.method == 'POST':
+        try:
+            client_ip = request.META['REMOTE_ADDR']
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'RFIDCard'}
+            if all(k in req for k in req_key) and all(req.values()):
+                try:
+                    from .models import Devices
+                    ip_device = Devices.objects.get(ip = client_ip)
+                    if ip_device.state == 'Proposed':
+                        from .models import Frusers
+                        fruser = Frusers.objects.get(rfidcard = req['RFIDCard'])
+                        for member in fruser.frusergroupmember_set.filter(fruseroid=fruser.oid):
+                            for device in member.groupoid.frusergroupdevices_set.filter(groupoid=member.groupoid):
+                                if device.deviceoid == ip_device:
+                                    return JsonResponse(dict(ChainMap(result_pass, {'FRUserId':fruser.fruserid})))
+                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+                    else:
+                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+                except:
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+            else:
+                return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+        except:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+    else:
+        return HttpResponse('method error')
+
+def rfid_check(request):
+    if request.method == 'POST':
+        try:
+            client_ip = request.META['REMOTE_ADDR']
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'RFIDCard'}
+            if all(k in req for k in req_key) and all(req.values()):
+                try:
+                    from .models import Devices
+                    if Devices.objects.get(ip = client_ip).state == 'Proposed':
+                        from .models import Frusers
+                        Frusers.objects.get(rfidcard = req['RFIDCard'])
+                        return JsonResponse(dict(result_success))
+                    else:
+                        return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+                except:
+                    return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+            else:
+                return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+        except:
+            return JsonResponse(dict(ChainMap(result_fail, fail_code999, fail_message)))
+    else:
+        return HttpResponse('method error')
diff --git a/api/user.py b/api/user.py
new file mode 100644
index 0000000..08a655a
--- /dev/null
+++ b/api/user.py
@@ -0,0 +1,80 @@
+#-*-coding:utf-8-*-
+
+import json, requests
+from collections import ChainMap
+from django.http import HttpResponse, JsonResponse
+
+result_success = {'Result':'Success'}
+result_fail = {'Result':'Fail'}
+fail_code999 = {'Code':'9999'}
+fail_message = {'Message':'xxxxxxxxxxxxxxxx'}
+
+def add(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId', 'Name', 'Gender', 'Age', 'RFID', 'State'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_success)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def update(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId', 'Name', 'Gender', 'Age', 'RFID', 'State'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_success)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def delete(request):
+    if request.method == 'POST':
+        try:
+            req = json.loads(request.body.decode('utf-8'))
+            req_key = {'FRUserId'}
+            if all(k in req for k in req_key) and all(req.values()):
+                """
+                enter code
+                """
+                res = dict(result_success)
+            else:
+                res = dict(ChainMap(result_fail, fail_code999, fail_message))
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
+
+def list(request):
+    if request.method == 'POST':
+        try:
+            """
+            enter code
+            """
+        except:
+            res = dict(ChainMap(result_fail, fail_code999, fail_message))
+
+        return JsonResponse(res)
+    else:
+        return HttpResponse('method error')
diff --git a/br06/settings.py b/br06/settings.py
new file mode 100644
index 0000000..a87273b
--- /dev/null
+++ b/br06/settings.py
@@ -0,0 +1,125 @@
+"""
+Django settings for br06 project.
+
+Generated by 'django-admin startproject' using Django 1.10.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'pf6w=kly%$(mh(c8=%vvv_+&_p40yp5+9j0c^^&^7hcdbl4^uz'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'api'
+]
+
+MIDDLEWARE_CLASSES = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    #'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'br06.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'br06.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'br06',
+        'USER': 'root',
+        'PASSWORD': 'pwd',
+        'HOST': '',
+        'PORT': '',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/br06/urls.py b/br06/urls.py
new file mode 100644
index 0000000..f7885eb
--- /dev/null
+++ b/br06/urls.py
@@ -0,0 +1,53 @@
+"""BR06 URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.conf.urls import url, include
+    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
+"""
+from django.conf.urls import url
+from django.contrib import admin
+from api import user, group, face, recognition, connection
+
+urlpatterns = [
+    url(r'^admin/', admin.site.urls),
+]
+
+urlpatterns += [
+    url(r'^api/user/add/?$', user.add),
+    url(r'^api/user/update/?$', user.update),
+    url(r'^api/user/delete/?$', user.delete),
+    url(r'^api/user/list/?$', user.list),
+]
+
+urlpatterns += [
+    url(r'^api/group/list/?$', group.list),
+]
+
+urlpatterns += [
+    url(r'^api/face/add/?$', face.add),
+    url(r'^api/face/delete/?$', face.delete),
+    url(r'^api/face/list/?$', face.list),
+]
+
+urlpatterns += [
+    url(r'^api/recognition/face/verify/?$', recognition.face_verify),
+    url(r'^api/recognition/face/identify/?$', recognition.face_identify),
+    url(r'^api/recognition/face/check/?$', recognition.face_check),
+    url(r'^api/recognition/RFID/verify/?$', recognition.rfid_verify),
+    url(r'^api/recognition/RFID/check/?$', recognition.rfid_check),
+]
+
+urlpatterns += [
+    url(r'^api/connection/check/?$', connection.check),
+    url(r'^api/connection/get/?$', connection.get),
+    url(r'^api/connection/set/?$', connection.set),
+]
-- 
1.9.1

